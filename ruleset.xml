<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="SupportPal">
    <description>SupportPal coding standards (based on PSR2).</description>

    <arg name="extensions" value="php"/>
    <arg value="ns"/>

    <!-- https://github.com/slevomat/coding-standard - path relative to PHPCS -->
    <config name="installed_paths" value="../../slevomat/coding-standard"/>

    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2"/>

    <rule ref="Generic.PHP.Syntax"/>

    <rule ref="Generic.Formatting.SpaceAfterNot" />

    <rule ref="Generic.CodeAnalysis.EmptyStatement" />
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>

    <rule ref="Generic.Files.ByteOrderMark"/>

    <rule ref="Generic.Formatting.SpaceAfterCast"/>

    <rule ref="Generic.Functions.CallTimePassByReference"/>

    <rule ref="Generic.NamingConventions.ConstructorName">
        <!-- Fairly buggy this sniff... -->
        <exclude name="Generic.NamingConventions.ConstructorName.OldStyle"/>
    </rule>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <rule ref="PEAR.ControlStructures.MultiLineCondition">
        <!-- Checks the indentation of multi-line IFs -->
        <exclude name="PEAR.ControlStructures.MultiLineCondition.Alignment"/>
    </rule>

    <rule ref="PSR2.Classes.ClassDeclaration"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/>
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
    <rule ref="PSR2.Namespaces.UseDeclaration"/>

    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
            <property name="ignoredAnnotationNames" type="array">
                <element key="@license" value="@license"/>
                <element key="@version" value="@version"/>
            </property>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />
    <rule ref="SlevomatCodingStandard.PHP.ShortList" />
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch" />
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses" />
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses" />
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />

    <!--
        DOCBLOCK rules.
     -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <!-- Prefer to be explicit. -->
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation" />
    </rule>

    <rule ref="Zend.Files.ClosingTag" />
</ruleset>

